# .github/workflows/deploy.yml

name: "godot-ci export"

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  GODOT_VERSION: 3.5.1
  EXPORT_NAME: godot-2d-pong

jobs:
  export-windows-linux-web:
    name: Export
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Windows Build
        run: |
          mkdir -v -p build/windows
          godot -v --export "Windows Desktop" build/windows/$EXPORT_NAME.exe
          zip -r windows.zip build/windows/
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows
          path: windows.zip
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./windows.zip
          asset_name: windows.zip
          asset_content_type: application/zip


      - name: Linux Build
        run: |
          mkdir -v -p build/linux
          godot -v --export "Linux/X11" build/linux/$EXPORT_NAME.x86_64
          tar -zcvf linux.tar.gz build/linux/
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux
          path: linux.tar.gz
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./linux.tar.gz
          asset_name: linux.tar.gz
          asset_content_type: application/x-gzip

      - name: Web Build
        run: |
          mkdir -v -p build/web
          godot -v --export "HTML5" build/web/index.html
          zip -r web.zip build/web/
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: web
          path: web.zip
      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./web.zip
          asset_name: web.zip
          asset_content_type: application/zip

      - name: Install rsync ðŸ“š
        run: |
          apt-get update && apt-get install -y rsync
      - name: Deploy to GitHub Pages ðŸš€
        uses: JamesIves/github-pages-deploy-action@releases/v4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: build/web # The folder the action should deploy.

  # export-mac:
  #   name: Mac Export
  #   runs-on: ubuntu-20.04
  #   container:
  #     image: barichello/godot-ci:latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #     - name: Setup
  #       run: |
  #         mkdir -v -p ~/.local/share/godot/templates
  #         mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
  #     - name: Mac Build
  #       run: |
  #         mkdir -v -p build/mac
  #         godot -v --export "Mac OSX" ../build/mac/$EXPORT_NAME.zip
  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: mac
  #         path: build/mac